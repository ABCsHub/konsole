/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -l TESession -i TESession.h -a sessionadaptor -m org.kde.konsole.Session.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef SESSIONADAPTOR_H_1161945114
#define SESSIONADAPTOR_H_1161945114

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "TESession.h"
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.kde.konsole.Session
 */
class SessionAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.konsole.Session")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.konsole.Session\" >\n"
"    <method name=\"closeSession\" >\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"    <method name=\"sendSignal\" >\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"      <arg direction=\"in\" type=\"b\" name=\"signal\" />\n"
"    </method>\n"
"    <method name=\"clearHistory\" />\n"
"    <property access=\"read\" type=\"s\" name=\"sessionName\" />\n"
"    <property access=\"read\" type=\"i\" name=\"sessionPid\" />\n"
"    <property access=\"readwrite\" type=\"s\" name=\"schema\" />\n"
"    <property access=\"readwrite\" type=\"s\" name=\"encoding\" />\n"
"    <property access=\"readwrite\" type=\"s\" name=\"keytab\" />\n"
"    <property access=\"readwrite\" type=\"s\" name=\"font\" />\n"
"    <property access=\"readwrite\" type=\"(ii)\" name=\"size\" >\n"
"      <annotation value=\"QSize\" name=\"com.trolltech.QtDBus.QtTypeName\" />\n"
"    </property>\n"
"  </interface>\n"
        "")
public:
    SessionAdaptor(TESession *parent);
    virtual ~SessionAdaptor();

    inline TESession *parent() const
    { return static_cast<TESession *>(QObject::parent()); }

public: // PROPERTIES
    Q_PROPERTY(QString encoding READ encoding WRITE setEncoding)
    QString encoding() const;
    void setEncoding(const QString &value);

    Q_PROPERTY(QString font READ font WRITE setFont)
    QString font() const;
    void setFont(const QString &value);

    Q_PROPERTY(QString keytab READ keytab WRITE setKeytab)
    QString keytab() const;
    void setKeytab(const QString &value);

    Q_PROPERTY(QString schema READ schema WRITE setSchema)
    QString schema() const;
    void setSchema(const QString &value);

    Q_PROPERTY(QString sessionName READ sessionName)
    QString sessionName() const;

    Q_PROPERTY(int sessionPid READ sessionPid)
    int sessionPid() const;

    Q_PROPERTY(QSize size READ size WRITE setSize)
    QSize size() const;
    void setSize(const QSize &value);

public Q_SLOTS: // METHODS
    void clearHistory();
    bool closeSession();
    bool sendSignal(bool signal);
Q_SIGNALS: // SIGNALS
};

#endif
