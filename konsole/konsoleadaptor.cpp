/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.konsole.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "konsoleadaptor.h"
#include "konsoleadaptor.moc"

KonsoleAdaptor::KonsoleAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KonsoleAdaptor::~KonsoleAdaptor()
{
    // destructor
}

void KonsoleAdaptor::activateSession(const QString &sessionId)
{
    // handle method call org.kde.konsole.activateSession
    QMetaObject::invokeMethod(parent(), "activateSession", Q_ARG(QString, sessionId));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->activateSession(sessionId);
}

QString KonsoleAdaptor::currentSession()
{
    // handle method call org.kde.konsole.currentSession
    QString out0;
    QMetaObject::invokeMethod(parent(), "currentSession", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->currentSession();
    return out0;
}

bool KonsoleAdaptor::fullScreen()
{
    // handle method call org.kde.konsole.fullScreen
    bool out0;
    QMetaObject::invokeMethod(parent(), "fullScreen", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->fullScreen();
    return out0;
}

void KonsoleAdaptor::moveSessionLeft()
{
    // handle method call org.kde.konsole.moveSessionLeft
    QMetaObject::invokeMethod(parent(), "moveSessionLeft");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->moveSessionLeft();
}

void KonsoleAdaptor::moveSessionRight()
{
    // handle method call org.kde.konsole.moveSessionRight
    QMetaObject::invokeMethod(parent(), "moveSessionRight");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->moveSessionRight();
}

QString KonsoleAdaptor::newSession(const QString &type)
{
    // handle method call org.kde.konsole.newSession
    QString out0;
    QMetaObject::invokeMethod(parent(), "newSession", Q_RETURN_ARG(QString, out0), Q_ARG(QString, type));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->newSession(type);
    return out0;
}

QString KonsoleAdaptor::newSession()
{
    // handle method call org.kde.konsole.newSession
    QString out0;
    QMetaObject::invokeMethod(parent(), "newSession", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->newSession();
    return out0;
}

void KonsoleAdaptor::nextSession()
{
    // handle method call org.kde.konsole.nextSession
    QMetaObject::invokeMethod(parent(), "nextSession");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->nextSession();
}

void KonsoleAdaptor::prevSession()
{
    // handle method call org.kde.konsole.prevSession
    QMetaObject::invokeMethod(parent(), "prevSession");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->prevSession();
}

void KonsoleAdaptor::reparseConfiguration()
{
    // handle method call org.kde.konsole.reparseConfiguration
    QMetaObject::invokeMethod(parent(), "reparseConfiguration");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->reparseConfiguration();
}

int KonsoleAdaptor::sessionCount()
{
    // handle method call org.kde.konsole.sessionCount
    int out0;
    QMetaObject::invokeMethod(parent(), "sessionCount", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->sessionCount();
    return out0;
}

QString KonsoleAdaptor::sessionId(int position)
{
    // handle method call org.kde.konsole.sessionId
    QString out0;
    QMetaObject::invokeMethod(parent(), "sessionId", Q_RETURN_ARG(QString, out0), Q_ARG(int, position));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->sessionId(position);
    return out0;
}

void KonsoleAdaptor::setFullScreen(bool on)
{
    // handle method call org.kde.konsole.setFullScreen
    QMetaObject::invokeMethod(parent(), "setFullScreen", Q_ARG(bool, on));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setFullScreen(on);
}

