/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -l TESession -i TESession.h -a sessionadaptor -m org.kde.konsole.Session.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "sessionadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SessionAdaptor
 */

SessionAdaptor::SessionAdaptor(TESession *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SessionAdaptor::~SessionAdaptor()
{
    // destructor
}

QString SessionAdaptor::encoding() const
{
    // get the value of property encoding
    return qvariant_cast< QString >(parent()->property("encoding"));
}

void SessionAdaptor::setEncoding(const QString &value)
{
    // set the value of property encoding
    parent()->setProperty("encoding", value);
}

QString SessionAdaptor::font() const
{
    // get the value of property font
    return qvariant_cast< QString >(parent()->property("font"));
}

void SessionAdaptor::setFont(const QString &value)
{
    // set the value of property font
    parent()->setProperty("font", value);
}

QString SessionAdaptor::keytab() const
{
    // get the value of property keytab
    return qvariant_cast< QString >(parent()->property("keytab"));
}

void SessionAdaptor::setKeytab(const QString &value)
{
    // set the value of property keytab
    parent()->setProperty("keytab", value);
}

QString SessionAdaptor::schema() const
{
    // get the value of property schema
    return qvariant_cast< QString >(parent()->property("schema"));
}

void SessionAdaptor::setSchema(const QString &value)
{
    // set the value of property schema
    parent()->setProperty("schema", value);
}

QString SessionAdaptor::sessionName() const
{
    // get the value of property sessionName
    return qvariant_cast< QString >(parent()->property("sessionName"));
}

int SessionAdaptor::sessionPid() const
{
    // get the value of property sessionPid
    return qvariant_cast< int >(parent()->property("sessionPid"));
}

QSize SessionAdaptor::size() const
{
    // get the value of property size
    return qvariant_cast< QSize >(parent()->property("size"));
}

void SessionAdaptor::setSize(const QSize &value)
{
    // set the value of property size
    parent()->setProperty("size", value);
}

void SessionAdaptor::clearHistory()
{
    // handle method call org.kde.konsole.Session.clearHistory
    parent()->clearHistory();
}

bool SessionAdaptor::closeSession()
{
    // handle method call org.kde.konsole.Session.closeSession
    return parent()->closeSession();
}

bool SessionAdaptor::sendSignal(bool signal)
{
    // handle method call org.kde.konsole.Session.sendSignal
    return parent()->sendSignal(signal);
}


#include "sessionadaptor.moc"
